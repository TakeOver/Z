let eval = (what)-> eval! parse! (what)
let read = () -> parse!(input())
let map = (func, list) -> {
        var res = []
        for i in list {
                res[] = func(i)
        }
        res
}
let reduce = (func, list) -> {
        let len = list.len()
        match len {
                0 => nil
                _ => {
                        var res = list[0]
                        var i = 1
                        while i < len {
                                res = func(res,list[i])
                                i=i+1
                        }
                        res
                }
        }
}
export reduce
export map
export eval
export read
import object
let String = #{
        len = Native.str.len,
        __getindex = Native.str.charAt,
        __setindex = Native.str.setCharAt,
        __iter = (self)->
                #{
                        next = (iter)->{
                                iter.pos = iter.pos + 1
                                cond {
                                        iter.pos >= self.len() => nil
                                        true => self[iter.pos] 
                                }
                        }
                        valid = iter -> iter.pos + 1 < self.len()
                }
}
let Number = #{
        times = (self,body)->
                for i = 0 to self-1 {
                        body(i)
                }

}
let Expression = #{
        append = Native.ast.append,
        getchild = Native.ast.getchild
}
export String
export Number
export Expression