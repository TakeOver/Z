run
let object = ${#{
        is_nil = false
}}
let system_getter = (self,what) ->
        self.base[what]

let allocator = (self,args...) -> {
        let obj = self.create()
        obj.super = (obj,args...)->
                obj.base = self.inherits.new(...args)
        obj.init(...args)
        delete obj.init
        delete obj.super
        obj.instance = self
        obj["$system_getter"] = system_getter
        obj
}
let Object = #{
        base = eval!(object),
        new = allocator,
        create = self -> eval!(object)
}
let Class = #{
        base = Object.new(),
        new = (self,inherits,ast) -> {       
                self = #{
                        base = Class
                }
                self.class_ast = ast
                self.create = (self)-> 
                        eval!(self.class_ast)
                self.new = allocator
                self.inherits = inherits
                self
        }
}
let String = #{
        base = Object.create(),
        new = self-> "",
        create = self -> "",
        super = self-> self.base.init(),
        "get:len" = self -> Native.str["len"](self),
        __getindex = Native.str.charAt,
        __setindex = Native.str.setCharAt,
        __iter = (self)-> #{
                        next = iter->{
                                iter.pos = iter.pos + 1
                                cond {
                                        iter.pos >= self.len => nil
                                        true => self[iter.pos] 
                                }
                        },
                        valid = iter -> iter.pos + 1 < self.len
                }
}
let Number = #{
        base = Object.create(),
        new = self-> 0,
        create = self -> 0,
        times = (self,body)->
                for i = 0 to self-1
                        body(i)
}
let Expression = #{
        base = Object.create(),
        new = self-> ${{}},
        create = self -> ${{}},
        append = Native.ast.append,
        getchild = Native.ast.getchild,
        toArray = Native.ast.toArray,
        "get:expr" = Native.ast.expr,
        eval! = eval!
}
let Array = #{
        base = Object.create(),
        new = self-> [],
        create = self -> [],
        "get:len" = self -> Native.str["len"](self)
}
let __instanceof = (derived,base) -> {
        while derived.base != nil and derived.instance != base
                derived = derived.base
        derived.instance == base
}
let Nil = #{
        base = Object.new(),
        is_nil = true
}
Class["$system_getter"] = system_getter
Object["$system_getter"]=system_getter
Number["$system_getter"]=system_getter
Array["$system_getter"]=system_getter
String["$system_getter"]=system_getter
Expression["$system_getter"]=system_getter
Nil["$system_getter"]=system_getter
export Expression
export Number
export String
export Class
export Object
export Array
export Nil
run!