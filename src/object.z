let object = ${#{
        nil? = false
}}
let system_getter = (self,what)->
        self.base[what]

let allocator = (self,args...)-> {
        let obj = self.create()
        obj.super = (obj,args...)->
                obj.base = self.inherits.new(...args)
        obj.init(...args)
        delete obj.init
        delete obj.super
        obj.instance = self
        obj["$system_getter"] = system_getter
        obj
}
let Object = #{
        base = eval! object,
        new = self -> eval! object,
        create = self -> eval! object,
        nil? = false
}
let Class = #{
        base = Object.new(),
        new = (self,inherits,ast) -> {                
                self = #{
                        base = Class
                }
                self.class_ast = ast
                self.create = (self)-> 
                        eval! self.class_ast
                self.new = allocator
                self.inherits = inherits
                self
        },
        nil? = false
}
let String = #{
        base = Object.create(),
        new = self-> "",
        create = self -> "",
        super = self-> self.base.init(),
        len = Native.str.len,
        __getindex = Native.str.charAt,
        __setindex = Native.str.setCharAt,
        __iter = (self)-> #{
                        next = iter->{
                                iter.pos = iter.pos + 1
                                cond {
                                        iter.pos >= self.len() => nil
                                        true => self[iter.pos] 
                                }
                        },
                        valid = iter -> iter.pos + 1 < self.len()
                },
        nil? = false
}
let Number = #{
        base = Object.create(),
        new = self-> 0,
        create = self -> 0,
        times = (self,body)->
                for i = 0 to self-1
                        body(i),
        nil? = false

}
let Expression = #{
        base = Object.create(),
        new = self-> ${{}},
        create = self -> ${{}},
        append = Native.ast.append,
        getchild = Native.ast.getchild,
        nil? = false
}
let Array = #{
        base = Object.create(),
        new = self-> [],
        create = self -> [],
        len = String.len,
        nil? = false
}
let __instanceof = (derived,base) -> {
        while derived.base!=nil and derived.instance!=base
                derived = derived.base
        return derived.instance == base
}
let Nil = #{
        base = Object.new()
        nil? = true
}
let __jstypeof = self-> {
        match __typeof(self) {
                String     => "String"
                Object     => "Object"
                Number     => "Number"
                Nil        => "Nil"
                Expression => "Expression"
                Array      => "Array"
                _          => "$Error"
        }
}
export Expression
export Number
export String
export Class
export Object
export Array